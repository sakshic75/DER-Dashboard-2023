import React, { useState, useEffect } from 'react';

interface DeviceData {
  der_name?: string;
  der_type?: string;
  location?: string;
}

interface HardwareData {
  [key: string]: [
    string, string, string, string, string, string, string, string, string, string,
    string, string, string, string, string, string, string, string, string, string,
    string, string, string, string, string, string, string, string, string, string,
    string, string
  ][];
}

interface TestFormData {
  creationDate?: string;
  testScope?: string;
  reason?: string;
}

const styles = {
  container: {
    maxWidth: '2000px',
    margin: 'auto',
    paddingLeft: '150px',
    paddingRight: '150px',
    paddingTop: '40px',
    paddingBottom: '40px',
    border: '1px solid #ddd',
    borderRadius: '20px',
    boxShadow: '0 0 20px rgba(0, 0, 0, 0.2)',
  },
  form: {
    marginTop: '30px',
    maxWidth: '1000px',
  },
  label: {
    display: 'block',
    marginBottom: '10px',
    fontSize: '18px',
    fontWeight: 'bold',
    textAlign: 'left', // Align labels to the left
  },
  labelT: {
    display: 'block',
    marginBottom: '10px',
    fontSize: '18px',
    textAlign: 'left', // Align labels to the left
  },
  input: {
    width: '100%',
    padding: '12px',
    marginBottom: '20px',
    border: '2px solid #ccc',
    borderRadius: '6px',
    boxSizing: 'border-box',
    fontSize: '16px',
  },
  button: {
    padding: '15px',
    background: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '18px',
  },

  viewResultsButton: {
    padding: '15px',
    background: '#3498db',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '18px',
    marginTop: '20px',
    marginLeft: 'auto',
  },

  loadingSpinner: {
    border: '4px solid rgba(0, 0, 0, 0.1)',
    borderTop: '4px solid #3498db',
    borderRadius: '55%',
    width: '30px',
    height: '30px',
    animation: typeof document !== 'undefined' ? 'spin 1s linear infinite' : 'none',
    display: 'inline-block',
    marginLeft: '30px',
    marginTop: '30px',
    // Adjust as needed
  },
};


export default function PenTest({ derId }) {
  const [hardwareData, setHardwareData] = useState<HardwareData | null>(null);
  const [deviceData, setDeviceData] = useState<DeviceData>({});
  const [testFormData, setTestFormData] = useState<TestFormData>({});
  const [loading, setLoading] = useState(false);
  const [testResultsAvailable, setTestResultsAvailable] = useState(false); // New state variable
  const [loadingSpinnerVisible, setLoadingSpinnerVisible] = useState(false);
  const deviceId = derId || "DER_1"; // Placeholder for actual device ID

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await fetch('/api/deviceInfo');

        if (!response.ok) {
          console.error("HTTP error", response.status);
          return;
        }

        const rawData = await response.json();

        if (typeof rawData.body === 'string') {
          const parsedData = JSON.parse(rawData.body);
          setHardwareData(parsedData);
        } else {
          setHardwareData(rawData);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    }

    fetchData();
  }, []);

  useEffect(() => {
    if (typeof document !== 'undefined') {
      const keyframes = `@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }`;

      // Apply the keyframes to the head of the document
      const styleSheet = document.styleSheets[0];
      styleSheet.insertRule(keyframes, styleSheet.cssRules.length);
    }
  }, []);

  useEffect(() => {
    if (hardwareData && hardwareData.data) {
      const filteredData = hardwareData.data.find(item => {
        const [derId] = Object.values(item);
        return derId[0] === deviceId;
      });

      if (filteredData) {
        const [
          der_id, der_name, der_type, manufacturer_id, manufacturer_serial_number,
          manufacture_date, manufacturer_hw_version, manufacturer_info,
          manufacturer_model_number, latest_sw_version, latest_sw_release_date,
          latest_firmware_version, latest_firmware_release_date, location, setting_id,
          der_id_set, set_max_ac_current, set_max_usable_energy_storage,
          set_minpf_overexcited_limit, set_minpf_underexcited_limit, set_max_apparent_power,
          set_max_reactive_power_tx, set_max_reactive_power_rx, set_max_active_power_tx,
          set_max_energy_storage, set_min_ac_voltage, set_max_ac_voltage,
          current_sw_version, sw_last_update_date, current_firmware_version,
          firmware_last_update_date
        ] = filteredData[Object.keys(filteredData)[0]];

        setDeviceData({
          der_name: der_name,
          der_type: der_type,
          location: location,
        });
      }
    }
  }, [hardwareData, deviceId]);



  const handleInputChange = (e) => {
    setTestFormData({
      ...testFormData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // Set loading to true when starting the API call
      setLoading(true);
      setLoadingSpinnerVisible(true);

      // Add your API endpoint for saving the test data
      const response = await fetch('/api/saveTestData', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          derId: deviceId,
          der_name: deviceData.der_name,
          der_type: deviceData.der_type,
          location: deviceData.location,
          creationDate: testFormData.creationDate,
          testScope: testFormData.testScope,
          reason: testFormData.reason,
        }),
      });

      if (!response.ok) {
        console.error("HTTP error", response.status);
        setTimeout(() => {
          setLoading(false);
          setTestResultsAvailable(true);
          setLoadingSpinnerVisible(false);
        }, 10000);
        // Handle error, show message, etc.
        return;
      }

      // Successful API call
      console.log("Test data saved successfully!");

      // Set a timeout for 30 seconds to change loading state and display the button
      setTimeout(() => {
        setLoading(false);
        setTestResultsAvailable(true);
        setLoadingSpinnerVisible(false);
      }, 10000); // 30 seconds delay
    } catch (error) {
      console.error("Error saving test data:", error);
      // Handle error, show message, etc.
    }
  };

  return (
    <div style={styles.container}>
      {deviceData.der_name ? (
        <>
          <p style={styles.labelT as any}><strong>DER Name:</strong> {deviceData.der_name}</p>
          <p style={styles.labelT as any}><strong>Type:</strong> {deviceData.der_type}</p>
          <p style={styles.labelT as any}><strong>Location:</strong> {deviceData.location}</p>

          <form style={styles.form} onSubmit={handleSubmit}>
            <div>
              <label style={styles.label as any} htmlFor="creationDate">Test Creation Date:</label>
              <input
                style={styles.input as any}
                type="date"
                id="creationDate"
                name="creationDate"
                value={testFormData.creationDate || ''}
                onChange={handleInputChange}
              />
            </div>

            <div>
              <label style={styles.label as any} htmlFor="testScope">Test Scope:</label>
              <select
                style={styles.input as any} // Cast to 'any'
                id="testScope"
                name="testScope"
                value={testFormData.testScope || ''}
                onChange={handleInputChange}
              >
                <option value="">Select Test Scope</option>
                <option value="Website penetration testing">Website penetration testing</option>
                <option value="API penetration testing">API penetration testing</option>
                <option value="Network penetration testing">Network penetration testing</option>
                <option value="Wireless penetration testing">Wireless penetration testing</option>
                <option value="Authorisation penetration testing">Authorisation penetration testing</option>
              </select>
            </div>

            <div>
              <label style={styles.label as any} htmlFor="reason">Reason:</label>
              <select
                style={styles.input as any} // Cast to 'any'
                id="reason"
                name="reason"
                value={testFormData.reason || ''}
                onChange={handleInputChange}
              >
                <option value="">Select Reason</option>
                <option value="Security Standard Compliance">Security Standard Compliance</option>
                <option value="Periodic test">Periodic test</option>
                <option value="Risk Ranking">Risk Ranking</option>
                <option value="Recent Security Incident">Recent Security Incident</option>
                <option value="New enhancement and patchment">New enhancement and patchment</option>
              </select>
            </div>

            <button type="submit" style={styles.button}>Submit </button>{loading && loadingSpinnerVisible && (
              <div style={styles.loadingSpinner}></div>
            )} {!loading && testResultsAvailable && (
              <button style={styles.viewResultsButton} onClick={() => alert("View Test Results")}>
                View Test Results
              </button>
            )}
          </form>


        </>
      ) : (
        <>
          <p>No data available for the specified device ID.</p>
          <form style={styles.form} onSubmit={handleSubmit}>
            <div>
              <label style={styles.label as any} htmlFor="creationDate">Test Creation Date:</label>
              <input
                style={styles.input as any}
                type="date"
                id="creationDate"
                name="creationDate"
                value={testFormData.creationDate || ''}
                onChange={handleInputChange}
              />
            </div>

            <div>
              <label style={styles.label as any} htmlFor="testScope">Test Scope:</label>
              <select
                style={styles.input as any} // Cast to 'any'
                id="testScope"
                name="testScope"
                value={testFormData.testScope || ''}
                onChange={handleInputChange}
              >
                <option value="">Select Test Scope</option>
                <option value="Website penetration testing">Website penetration testing</option>
                <option value="API penetration testing">API penetration testing</option>
                <option value="Network penetration testing">Network penetration testing</option>
                <option value="Wireless penetration testing">Wireless penetration testing</option>
                <option value="Authorisation penetration testing">Authorisation penetration testing</option>
              </select>
            </div>

            <div>
              <label style={styles.label as any} htmlFor="reason">Reason:</label>
              <select
                style={styles.input as any} // Cast to 'any'
                id="reason"
                name="reason"
                value={testFormData.reason || ''}
                onChange={handleInputChange}
              >
                <option value="">Select Reason</option>
                <option value="Security Standard Compliance">Security Standard Compliance</option>
                <option value="Periodic test">Periodic test</option>
                <option value="Risk Ranking">Risk Ranking</option>
                <option value="Recent Security Incident">Recent Security Incident</option>
                <option value="New enhancement and patchment">New enhancement and patchment</option>
              </select>
            </div>

            <button type="submit" style={styles.button}>Submit</button> {loading && loadingSpinnerVisible && (
              <div style={styles.loadingSpinner}></div>
            )}{!loading && testResultsAvailable && (
              <button style={styles.viewResultsButton}>
                View Test Results
              </button>
            )}
          </form>



        </>
      )}
    </div>
  );
}
